# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import muscle_manager_protocol_pb2 as muscle__manager__protocol__pb2


class MuscleManagerStub(object):
  """The MUSCLE Manager Protocol
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.SubmitLogMessage = channel.unary_unary(
        '/muscle_manager_protocol.MuscleManager/SubmitLogMessage',
        request_serializer=muscle__manager__protocol__pb2.LogMessage.SerializeToString,
        response_deserializer=muscle__manager__protocol__pb2.LogResult.FromString,
        )
    self.RequestConfiguration = channel.unary_unary(
        '/muscle_manager_protocol.MuscleManager/RequestConfiguration',
        request_serializer=muscle__manager__protocol__pb2.ConfigurationRequest.SerializeToString,
        response_deserializer=muscle__manager__protocol__pb2.ConfigurationResult.FromString,
        )
    self.RegisterInstance = channel.unary_unary(
        '/muscle_manager_protocol.MuscleManager/RegisterInstance',
        request_serializer=muscle__manager__protocol__pb2.RegistrationRequest.SerializeToString,
        response_deserializer=muscle__manager__protocol__pb2.RegistrationResult.FromString,
        )
    self.RequestPeers = channel.unary_unary(
        '/muscle_manager_protocol.MuscleManager/RequestPeers',
        request_serializer=muscle__manager__protocol__pb2.PeerRequest.SerializeToString,
        response_deserializer=muscle__manager__protocol__pb2.PeerResult.FromString,
        )


class MuscleManagerServicer(object):
  """The MUSCLE Manager Protocol
  """

  def SubmitLogMessage(self, request, context):
    """Sends a logged message to the Manager
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def RequestConfiguration(self, request, context):
    """Requests the global base configuration
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def RegisterInstance(self, request, context):
    """Registers a newly started kernel instance
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def RequestPeers(self, request, context):
    """Requests information about peers
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_MuscleManagerServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'SubmitLogMessage': grpc.unary_unary_rpc_method_handler(
          servicer.SubmitLogMessage,
          request_deserializer=muscle__manager__protocol__pb2.LogMessage.FromString,
          response_serializer=muscle__manager__protocol__pb2.LogResult.SerializeToString,
      ),
      'RequestConfiguration': grpc.unary_unary_rpc_method_handler(
          servicer.RequestConfiguration,
          request_deserializer=muscle__manager__protocol__pb2.ConfigurationRequest.FromString,
          response_serializer=muscle__manager__protocol__pb2.ConfigurationResult.SerializeToString,
      ),
      'RegisterInstance': grpc.unary_unary_rpc_method_handler(
          servicer.RegisterInstance,
          request_deserializer=muscle__manager__protocol__pb2.RegistrationRequest.FromString,
          response_serializer=muscle__manager__protocol__pb2.RegistrationResult.SerializeToString,
      ),
      'RequestPeers': grpc.unary_unary_rpc_method_handler(
          servicer.RequestPeers,
          request_deserializer=muscle__manager__protocol__pb2.PeerRequest.FromString,
          response_serializer=muscle__manager__protocol__pb2.PeerResult.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'muscle_manager_protocol.MuscleManager', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
